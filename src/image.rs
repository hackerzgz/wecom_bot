use std::fs::File;
use std::io::Read;
use std::path::Path;

use base64::{engine::general_purpose, Engine as _};
use md5;

use crate::bot::WeComError;

pub struct Image {
    content: Vec<u8>,
}

impl Image {
    pub fn new(data: Vec<u8>) -> Self {
        Self { content: data }
    }

    fn from_file<P: AsRef<Path>>(path: P) -> Result<Self, WeComError> {
        let mut file = File::open(path).map_err(WeComError::image)?;
        let mut buf: Vec<u8> = Vec::new();
        file.read_to_end(&mut buf).map_err(WeComError::image)?;
        Ok(Self { content: buf })
    }

    /// return encoded base64 and md5 of image data
    pub fn encode(&self) -> (String, String) {
        let b64 = general_purpose::STANDARD.encode(self.content.clone());
        let m5 = md5::compute(self.content.clone());

        (b64, format!("{:x}", m5))
    }
}

#[cfg(test)]
mod image_test {
    use super::Image;

    #[test]
    pub fn encode() {
        let img = Image::from_file("src/tests/imgs/rust-logo.png").unwrap();

        assert_eq!(img.encode().0, "iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmlMAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXF5fYGFiY2RlZmdoa2xub3Bxc3R1dnd5ent8fX5/gIGChIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru9vr/AwcLExcfIycrLzM3Oz9DR0tPU1dbX2Nrb3N3e3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f6s5l7kAAAAAWJLR0T0MtUrTQAACHxJREFUGBntwfljFOUBBuB3EySKBIQADbAJEqOBUCqoQNFopYASiPWggBxZQFpqI2dpa7FYFwpyWC5FQynIZblKAaGCVBFadOSoylFAiIRUQkhIstmZ9x/oN3vMzs4mZL7NJvjDPg/i4uLi4uLi4uLimkLWD/BdkPlD+A30aGPg1zsbt0yPKi6C7o5TZEk76GbS+zhulTdIzoYwh0IhhMka+R6aWJvxWdA1L6FQAHSvpqA9BoxWSValQJc+oSOaxm5WTXEAGE6dNj71EH2+SnvKQ92LEPLL+BmaREI5yT2pwA7W4QjQej2Fu9AU7qbu8vCJKusyfchZ6vqjKQylbRPRmNI2Ls2CMJW1UDXWYj6E9D9uzUZjWEqq23KA9YxwfpCj+cQKRjgA9FrrIbeiMRRSd3iXxggPQ5jCSHs/pO59NIZlrMtZ6FJZp21oDAtYl3PQdWad1qMxzGGdHoUwnXV6BzGVk9/DAeAVRji2aETnJSQvDm3W4heVJJd0GrX0uEarVRDuHfskYuJ+lSzZMX1UMcN9PvM+CI63KVTWUPgDdOmzTjJc2ZiCzUUkhyAWBrEWnnU5CEhcz4BZCHqo0MNajEMstPLSSt2UiZDEzdRpU2DSZXElI9yLmDhKi73dECZpL0nvRIS7ezstihAbixmmaDSskl499sGPEeGnlxhmM2JjJM3+3h623bWWZgWIjYcZUjPNARkFNQwZgwZK27hv26a3V12m4XoeJOUU0VD257c2bdm3NRvR+hMtLvWGtMzztNiCaBUw3OVsRKHLGYabi2i1KqXZlZ6IStdzNPOkI2rzaFb1rU1ff7JsTCuE9CijyVpEz1nNaFVu6QvDMypDeqEB3mX0tPfuRdDLNBxAQ6xiQ5SNRIDjHwzagyi17JPv3q2yYV5BwD0VDNAOzJ/Y/y7ISv6QMTETAVMZ5tOOkDOMsaEOgl/ilwwzCXLaFjE2Tt0On45VNCu7G5Ke0Bgbk+Azh2HyIW0BY+MwdHdcodl6yEs6yphQ20GYTLPzbRCFnhqF4nEdui3VyGubdKW0KP/WpIK1eRSA4ySpLh0wcDV9hiAaoyloORDeJNVMCAotxsPs+3PLGGE4gKEkZ0FYQN1USEuecJC689A9RPINCAotXAiXcZZWwwDsI6uTIHSgz5EX20JGrzUV9PsYum4kr7cGoNDCBYs8WvUEemrkZeiaVdOv6r0c2Pa9SgbdSIMwg0IeAIUWLlgk0+JSAvA7CtkQfkSD2gN2pXloONQFGFFBYTAAhRYuWHSnxTwAbgpHOgEZX9CgPQDb8r00eE9cou7T2wAotMhHuKTdDHetPYBeNRTKdu29QYM2ExKeq2K4G8taQ1BokQ+zrgX/oYULutwztFAnQ8qAMpoU/bYdfBRaFJ8OuVDNCCvglzj8nzSryYek/iqDFFcSAhTKWZcIQ9/1NTTkQVaiRj91EEIUSlmQALO0eVUMcEJS738x4CpMFEooHQWrEwz46jHIaOGuYdB/YaLQvuNORPiYQdqa9rBt2AWGfAYThfZ5ZyLC+wwpGQubOnpochgmCmW8mQCLv9HsftjT7gZNjsFEoZSVsNhHE28WbOqrMOQUTBTKcSHcQYacGgTbmk0rZ9AlmCiUU9wKQSlz3G73RQZVz7kDMtJ3MqCmGUIUWmyeGTR7zTeMVICgQTT7pDskOVQGdEWIQovxCEmaUU0rBUGDadYBsvI0BgxEiEILF8yeVWnVBQHP0Gw8JD3vYdBkhCi0cCHMclq5EPBLmmlTIWWySsNqhCi0cCFMJy8tliNgF8PNhoTpNDmFEIUW+Qj3AS1ONYfPAI0WC2FbhkqzjjAotMhHuJdptb87gNsmlDLCw7Ar5SrNLp42VNNipztgdnPochnpxL6PKhipMhO2dZl7kbKc0LWjTSVLukNGYu6GGkpxwucMbVB3PNcc0gZTihM+f6EN4xCNfhplOOEziTYMRxTu/IJSnPDJog3FHSGvkHKc8LtEG/Y4IGsUJTnh56YdUyAp9SolOeGXWkobqrpDzlDKciJgBO14AXKSNl6jHCeCFrFe5bvaQFra4IJ3PLTNiSDH9HLWTV03LberA1FaSsNfR9zU0w6EpOSOCLeShu1oiK00VPVB1LqW0PBvNECmlyHnOsOnRcadkNPmBE1yEL1lNPu8TUK2a/nRGpZNgA0Fxd7P33qhZyJafESzbYha+xsMc+4a/bwZqNdT9Lu+/xDDqFmI1q9Yl2mo12bWZQmitZCRzv2PwmbU6zwFVWOkDYhWyuLClfPdvz5Dw8n74RhVTp5HfTqRLBndos3UKhq++Y173sq3V6SjgR5kkDcbwkskO6Eez5LMhTCDhuGIjbEMOgFdOslnUA83eRm6VBqmIzZWMOgMdPeRfA312E9egC6Fhu2IjeM0PA7BTfID3FxiGcl+EH5GQ4kDsdBWo6Hs+eROv/eSrHipLW4ieQqFs48gYWQFQ3ogFoawVpVrH0tA7R555zr9iq/RbAJiIaua2vEVYx84Tasr745LhUXq2NUXaXW538glR71UcxAT3XLbQniZtfl676JJTw94IOOeBx8f9vOFe85qrMVKCMmDeyOmXmXUCtEYXmfUNqAxLGfUtqMxrKagbnnDQ9vUFeuqKexFY1hI3liWCayibbuBzvNKyQ1oDCnzZ7WHUEDb3BBaTVmcjsb0BH003oRGn3FoCk7qvuw3sIZ10Eb2OEpdHzQFxzWShS2BDfTRVAZoKn0OAkkLNFJriSaxkVdHQcilzpOHnfQ5ktC/nLoJEJ4s4kE0jdvzOkCXeJGkOhpIL6dQ0xsYXEWyPBm61j9JRhObS3IyhGkUXofwnJdcg1slo1SbAV0zhbyQDJ3LW/kgbpmUDPj1Kffkwi8tFd8F7TsjLi4uLi4uLi4uLu474f8+XDdlkISxUwAAAABJRU5ErkJggg==");
        assert_eq!(img.encode().1, "3e991d04eaf43675632b86ed212a143e");
    }
}
